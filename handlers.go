package main

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const helpText = `–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/rnd ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/todo add <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/todo list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/todo done <–Ω–æ–º–µ—Ä> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/todo del <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/note add <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
/note del <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/finance add income|expense <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
/finance balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/finance list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
`

const msgUnknownCommand = "–Ø –Ω–µ –ø–æ–Ω—è–ª ü§î –ø–æ–ø—Ä–æ–±—É–π /help"

func (b *Bot) handleTodo(msg *tgbotapi.Message) {
	parts := strings.Fields(msg.Text)
	if len(parts) < 2 {
		b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /todo [add|list|done|del]")
		return
	}

	cmd := parts[1]
	userID := msg.From.ID

	switch cmd {
	case "add":
		if len(parts) < 3 {
			b.reply(msg.Chat.ID, "–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
			return
		}
		task := strings.Join(parts[2:], " ")
		b.store.AddTodo(userID, task)
		b.reply(msg.Chat.ID, "–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
	case "list":
		todos := b.store.GetTodos(userID)
		if len(todos) == 0 {
			b.reply(msg.Chat.ID, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üëå")
			return
		}
		out := "üìù *–°–ø–∏—Å–æ–∫ –¥–µ–ª:*\n"
		for i, t := range todos {
			status := "‚ùå"
			if t.Done {
				status = "‚úÖ"
			}
			out += fmt.Sprintf("%d. %s %s\n", i+1, status, t.Text)
		}
		b.reply(msg.Chat.ID, out)
	case "done":
		if len(parts) < 3 {
			b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /todo done <–Ω–æ–º–µ—Ä>")
			return
		}
		idx, err := strconv.Atoi(parts[2])
		if err != nil {
			b.reply(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
			return
		}
		if err := b.store.MarkTodoDone(userID, idx-1); err != nil {
			b.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error())
			return
		}
		b.reply(msg.Chat.ID, "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ")
	case "del":
		if len(parts) < 3 {
			b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /todo del <–Ω–æ–º–µ—Ä>")
			return
		}
		idx, err := strconv.Atoi(parts[2])
		if err != nil {
			b.reply(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
			return
		}
		if err := b.store.DeleteTodo(userID, idx-1); err != nil {
			b.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error())
			return
		}
		b.reply(msg.Chat.ID, "–£–¥–∞–ª–µ–Ω–æ üóë")
	default:
		b.reply(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

func (b *Bot) handleNote(msg *tgbotapi.Message) {
	parts := strings.Fields(msg.Text)
	if len(parts) < 2 {
		b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /note [add|list|del]")
		return
	}

	cmd := parts[1]
	userID := msg.From.ID

	switch cmd {
	case "add":
		if len(parts) < 3 {
			b.reply(msg.Chat.ID, "–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
			return
		}
		note := strings.Join(parts[2:], " ")
		b.store.AddNote(userID, note)
		b.reply(msg.Chat.ID, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ üìù")
	case "list":
		notes := b.store.GetNotes(userID)
		if len(notes) == 0 {
			b.reply(msg.Chat.ID, "–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç üëå")
			return
		}
		out := "üóí *–ó–∞–º–µ—Ç–∫–∏:*\n"
		for i, n := range notes {
			out += fmt.Sprintf("%d. %s\n", i+1, n)
		}
		b.reply(msg.Chat.ID, out)
	case "del":
		if len(parts) < 3 {
			b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /note del <–Ω–æ–º–µ—Ä>")
			return
		}
		idx, err := strconv.Atoi(parts[2])
		if err != nil {
			b.reply(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
			return
		}
		if err := b.store.DeleteNote(userID, idx-1); err != nil {
			b.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error())
			return
		}
		b.reply(msg.Chat.ID, "–£–¥–∞–ª–µ–Ω–æ üóë")
	default:
		b.reply(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

func (b *Bot) handleFinance(msg *tgbotapi.Message) {
	parts := strings.Fields(msg.Text)
	if len(parts) < 2 {
		b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /finance [add|balance|list]")
		return
	}

	cmd := parts[1]
	userID := msg.From.ID

	switch cmd {
	case "add":
		if len(parts) < 4 {
			b.reply(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /finance add income|expense <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
			return
		}
		kind := parts[2]
		amount, err := strconv.ParseFloat(parts[3], 64)
		if err != nil {
			b.reply(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
			return
		}
		desc := ""
		if len(parts) > 4 {
			desc = strings.Join(parts[4:], " ")
		}
		if err := b.store.AddFinance(userID, kind, amount, desc); err != nil {
			b.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error())
			return
		}
		b.reply(msg.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üí∞")
	case "balance":
		inc, exp := b.store.FinanceBalance(userID)
		bal := inc - exp
		out := fmt.Sprintf("–î–æ—Ö–æ–¥—ã: %.2f\n–†–∞—Å—Ö–æ–¥—ã: %.2f\n–ë–∞–ª–∞–Ω—Å: %.2f", inc, exp, bal)
		b.reply(msg.Chat.ID, out)
	case "list":
		tx := b.store.GetFinance(userID)
		if len(tx) == 0 {
			b.reply(msg.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç üëå")
			return
		}
		out := "üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*\n"
		for i, t := range tx {
			out += fmt.Sprintf("%d. [%s] %.2f ‚Äî %s\n", i+1, t.Kind, t.Amount, t.Desc)
		}
		b.reply(msg.Chat.ID, out)
	default:
		b.reply(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}
