package main

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const helpText = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/rnd - —Å–ª—É—á–∞–π–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/todo_add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/todo_list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/todo_done - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/todo_del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/note_add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_list - —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
/note_del - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/finance_add - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
/finance_balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/finance_list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
`

const msgUnknownCommand = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

// ---- TODO ----
func (b *Bot) handleTodoAdd(msg *tgbotapi.Message) {
	task := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/todo_add"))
	if task == "" {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
		return
	}
	b.store.AddTodo(msg.From.ID, task)
	b.reply(msg.Chat.ID, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
}

func (b *Bot) handleTodoList(msg *tgbotapi.Message) {
	tasks := b.store.GetTodos(msg.From.ID)
	if len(tasks) == 0 {
		b.reply(msg.Chat.ID, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
		return
	}
	resp := "–ó–∞–¥–∞—á–∏:\n"
	for i, t := range tasks {
		status := "‚ùå"
		if t.Done {
			status = "‚úÖ"
		}
		resp += fmt.Sprintf("%d. %s %s\n", i+1, status, t.Text)
	}
	b.reply(msg.Chat.ID, resp)
}

func (b *Bot) handleTodoDone(msg *tgbotapi.Message) {
	arg := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/todo_done"))
	i, err := strconv.Atoi(arg)
	if err != nil {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
		return
	}
	if err := b.store.MarkTodoDone(msg.From.ID, i-1); err != nil {
		b.reply(msg.Chat.ID, "–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
		return
	}
	b.reply(msg.Chat.ID, fmt.Sprintf("–ó–∞–¥–∞—á–∞ %d –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π ‚úÖ", i))
}

func (b *Bot) handleTodoDel(msg *tgbotapi.Message) {
	arg := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/todo_del"))
	i, err := strconv.Atoi(arg)
	if err != nil {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
		return
	}
	if err := b.store.DeleteTodo(msg.From.ID, i-1); err != nil {
		b.reply(msg.Chat.ID, "–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏")
		return
	}
	b.reply(msg.Chat.ID, fmt.Sprintf("–ó–∞–¥–∞—á–∞ %d —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è", i))
}

// ---- NOTES ----
func (b *Bot) handleNoteAdd(msg *tgbotapi.Message) {
	note := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/note_add"))
	if note == "" {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏")
		return
	}
	b.store.AddNote(msg.From.ID, note)
	b.reply(msg.Chat.ID, "–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üìù")
}

func (b *Bot) handleNoteList(msg *tgbotapi.Message) {
	notes := b.store.GetNotes(msg.From.ID)
	if len(notes) == 0 {
		b.reply(msg.Chat.ID, "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç")
		return
	}
	resp := "–ó–∞–º–µ—Ç–∫–∏:\n"
	for i, n := range notes {
		resp += fmt.Sprintf("%d. %s\n", i+1, n)
	}
	b.reply(msg.Chat.ID, resp)
}

func (b *Bot) handleNoteDel(msg *tgbotapi.Message) {
	arg := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/note_del"))
	i, err := strconv.Atoi(arg)
	if err != nil {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏")
		return
	}
	if err := b.store.DeleteNote(msg.From.ID, i-1); err != nil {
		b.reply(msg.Chat.ID, "–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏")
		return
	}
	b.reply(msg.Chat.ID, fmt.Sprintf("–ó–∞–º–µ—Ç–∫–∞ %d —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è", i))
}

// ---- FINANCE ----
func (b *Bot) handleFinanceAdd(msg *tgbotapi.Message) {
	op := strings.TrimSpace(strings.TrimPrefix(msg.Text, "/finance_add"))
	if op == "" {
		b.reply(msg.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +100 –∏–ª–∏ -50)")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
	kind := "income"
	amount, err := strconv.ParseFloat(op, 64)
	if err != nil {
		b.reply(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ -50")
		return
	}
	if amount < 0 {
		kind = "expense"
		amount = -amount
	}

	if err := b.store.AddFinance(msg.From.ID, kind, amount, ""); err != nil {
		b.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error())
		return
	}
	b.reply(msg.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ üí∞")
}

func (b *Bot) handleFinanceBalance(msg *tgbotapi.Message) {
	income, expense := b.store.FinanceBalance(msg.From.ID)
	balance := income - expense
	resp := fmt.Sprintf("–î–æ—Ö–æ–¥: %.2f\n–†–∞—Å—Ö–æ–¥: %.2f\n–ë–∞–ª–∞–Ω—Å: %.2f üíµ", income, expense, balance)
	b.reply(msg.Chat.ID, resp)
}

func (b *Bot) handleFinanceList(msg *tgbotapi.Message) {
	ops := b.store.GetFinance(msg.From.ID)
	if len(ops) == 0 {
		b.reply(msg.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç")
		return
	}
	resp := "–û–ø–µ—Ä–∞—Ü–∏–∏:\n"
	for i, op := range ops {
		sign := "+"
		if op.Kind == "expense" {
			sign = "-"
		}
		resp += fmt.Sprintf("%d. %s%.2f %s\n", i+1, sign, op.Amount, op.Desc)
	}
	b.reply(msg.Chat.ID, resp)
}
